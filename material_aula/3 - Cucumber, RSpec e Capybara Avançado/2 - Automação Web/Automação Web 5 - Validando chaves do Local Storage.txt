Cucumber, RSpec e Capybara Avançado > Automação Web > Validando chaves do Local Storage
_____________________________________________________________________________________________________

#########################################################################################
Subir todos os containers que estou usando nas aulas do Ninjaflix:
λ docker start pgdb pgadmin nflix-api-users nflix-api-movies nflix-api-gateway nflix-web

Parar todos os containers que estou usando nas aulas do Ninjaflix:
λ docker stop pgdb pgadmin nflix-api-users nflix-api-movies nflix-api-gateway nflix-web
#########################################################################################

Nessa aula iremos utilizar o mesmo BDD da aula passada:

#language: pt

Funcionalidade: Login

Para que eu possa gerenciar os filmes do catálogo Ninjaflix
Sendo um usuário previamente cadastrado
Posso acessar o sistema com o meu email e senha

@login_feliz
Cenário: Acesso
Quando eu faço login com "tony@stark.com" e "pwd123"
Então devo ser autenticado
E devo ver "Tony Stark" na área logada

Cenário: Senha inválida
Quando​​ eu faço login com "tony@stark.com"​ e "abc123"
Então não devo ser autenticado
E devo ver a mensagem de alerta "Usuário e/ou senha inválidos"

Cenário: Usuário não existe
Quando​​ eu faço login com "404@yahoo.com" e "abc123"
Então não devo ser autenticado
E devo ver a mensagem de alerta "Usuário e/ou senha inválidos"

Cenário: Email não informado
Quando​ eu faço login com "" e "abcxpto"
Então não devo ser autenticado
E devo ver a mensagem de alerta "Opps. Cadê o email?"

Cenário: Senha não informada
Quando​ eu faço login com "teste@gmail.com" e ""
Então não devo ser autenticado
E devo ver a mensagem de alerta "Opps. Cadê a senha?"

Também iremos utilizar os mesmos passos que o cucumber criou pra gente na aula passada:

Quando("eu faço login com {string} e {string}") do |string, string2|
  pending # Write code here that turns the phrase above into concrete actions
end

Então("devo ser autenticado") do
  pending # Write code here that turns the phrase above into concrete actions
end

Então("devo ver {string} na área logada") do |string|
  pending # Write code here that turns the phrase above into concrete actions
end

E também já temos a primeira parte implementada:
_____________________________________________________________________________________________________
Quando("eu faço login com {string} e {string}") do |email, senha|
  visit "/"
  fill_in "emailId", with: email
  fill_in "passId", with: senha
  click_button "Entrar"
end
_____________________________________________________________________________________________________

Agora iremos implementar a segunda parte desses steps que será a de autenticação

É muito comum validarmos se estamos logados procurando algum elemento da página que sabemos que só aparece quando nos autenticamos ao sistema, por exemplo:
procurar se o nome do usuário aparece no código da página ou se temos o botão de sair, já que estamos agora logados, porém nessa aula vamos aprender algo um pouco diferente.

Nós vamos procurar pelo token de autenticação dentro da página:
tecle F12 e depois vá até aba Application, expanda storage e vai dar para ver o default_auth_token e como isso funciona?:
Vamos deslogar e logar novamente, mas desta vez observando a aba de Network:
Podemos ver que a aplicação faz uma requisição para nossa API com o Json de login, passando email e senha, essa API por sua vez devolve esse token de autenticação

Token que temos em Application:
default_auth_token : eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwaXJlIjoiMjAyMC0wNS0yM1QxMjozNDoxNC45NjIrMDA6MDAifQ.5Br-mHNVpmuZQWh-ED70kwn0bdrGEKZV7J3wy97zU1o

Requisição feita à API em Json:
{email: "tony@stark.com", password: "pwd123"}
email: "tony@stark.com"
password: "pwd123"

Token que a API enviou:
expire: "2020-05-23T12:45:03.046+00:00"
token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwaXJlIjoiMjAyMC0wNS0yM1QxMjo0NTowMy4wNDYrMDA6MDAifQ.0lJIKk5DkVJhxpxJvpZitizS50TDvf2wwkdyUFTLl3Q"
userId: 1

Sabendo disso tudo podemos validar na automação se o token foi gerado e vamos fazer isso no step:

Então("devo ser autenticado") do
  pending # Write code here that turns the phrase above into concrete actions
end

Porém o Capybara não consegue acessar o local storage do navegador e para isso vamos utilizar o comando de java script:
window.localStorage.getItem("default_auth_token")

No código acima estamos pegando o token de localStorage. Vale observar que esses tokens têm 147 caracteres.

_____________________________________________________________________________________________________
Então("devo ser autenticado") do
  js_script = 'return window.localStorage.getItem("default_auth_token");'
  token = page.execute_script(js_script)
  puts token
end
_____________________________________________________________________________________________________
No código acima criamos a variável js_script e colocamos o código de java script dentro dela
criamos também a variável token para receber a execução desse java script
por fim printamos no console token apenas para vermos.

Vamos executar para ver isso acontecendo:

λ cucumber -t @login_feliz

# language: pt
Funcionalidade: Login
  Para que eu possa gerenciar o catalogo do Ninjaflix
  Sendo um usuário previamente cadastrado
  Posso acessar o sistema com meu email e senha

  @login_feliz
  Cenario: Acesso                                        # features/login.feature:9
    Quando eu faço login com "tony@stark.com" e "pwd123" # features/step_definitions/login_steps.rb:2
    Então devo ser autenticado                           # features/step_definitions/login_steps.rb:9
      eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwaXJlIjoiMjAyMC0wNS0yM1QxMzowMzowNS4wOTMrMDA6MDAifQ.JmQPHqz8HD_xgClLMHtmbNHKMGhdFoeWe58q3loVVsw
    E devo ver "Tony Stark" na área logada               # features/step_definitions/login_steps.rb:15
      TODO (Cucumber::Pending)
      ./features/step_definitions/login_steps.rb:16:in `"devo ver {string} na área logada"'
      features/login.feature:12:in `E devo ver "Tony Stark" na área logada'

1 scenario (1 pending)
3 steps (1 pending, 2 passed)
0m6.171s

Repare que ele printou no console o token pra gente:
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwaXJlIjoiMjAyMC0wNS0yM1QxMzowMzowNS4wOTMrMDA6MDAifQ.JmQPHqz8HD_xgClLMHtmbNHKMGhdFoeWe58q3loVVsw

Como dito, esse token tem exatamente 147 caracteres e vamos nos valer disso para validar se estamos autenticados:

_____________________________________________________________________________________________________
Quando("eu faço login com {string} e {string}") do |email, senha|
  visit "/"
  fill_in "emailId", with: email
  fill_in "passId", with: senha
  click_button "Entrar"
end

Então("devo ser autenticado") do
  js_script = 'return window.localStorage.getItem("default_auth_token");'
  token = page.execute_script(js_script)
  expect(token.length).to be 147
end

Então("devo ver {string} na área logada") do |string|
  pending # Write code here that turns the phrase above into concrete actions
end
_____________________________________________________________________________________________________


















